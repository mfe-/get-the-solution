# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - get-the-solution

on:
  push:
    branches:
      - main
      - feature/Iac

  pull_request:
  workflow_dispatch:

jobs:
  convert_via_pandoc:
    runs-on: ubuntu-latest

    container: 
      image: pandoc/latex:latest

    steps:
      # checkout repo contents
      - uses: actions/checkout@v4

      # run pandoc to generate html from markdown
      - name: run pandoc
        working-directory: src/assets/database
        run: |
          for i in *.md; do pandoc "$i" -o "${i%.*}".html --highlight-style=breezeDark --verbose; done

      # output generated file to build artifacts
      - uses: actions/upload-artifact@v3
        with:
          name: generated-html-files
          path: |
            src/assets/database/*.html

  build:
    needs: convert_via_pandoc
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: generated-html-files
          path: src/assets/database

      - name: info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch name: ${{ github.ref }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Action: ${{ github.action }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Repository name: ${{ github.repository_name }}"
          echo "Repository URL: ${{ github.repository_url }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Run number: ${{ github.run_number }}"
          

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install, build, and test
        run: |
          npm install
          npm install -g @angular/cli > /dev/null

      - name: export, build
        run: |
          export NODE_ENV=production
          ng build --configuration=production --aot
#          npm run test --if-present

      - name: export blogs to prerender routes for 
        shell: pwsh
        run: |
          $jsonFilePath = "./src/assets/database/blog.json"
          $blogEntries = Get-Content -Path $jsonFilePath -Encoding UTF8 | ConvertFrom-Json
          $blogEntries | ForEach-Object { Write-Output ("/blog/" + $_.Title) } | Out-File -FilePath "./prerender-routes.txt" -Encoding UTF8 -Force
          Get-Content ./prerender-routes.txt

      - name: Zip artifact for deployment
        # if: github.event_name != 'pull_request'
        run: |
          cat src/assets/database/blog.json

          cp src/assets/database/blog.json dist/get-the-solution-app/browser/assets/database/blog.json
          zip release.zip ./dist/* -r

      - name: Upload artifact for deployment job
        # if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: node-app
          path: release.zip

      - name: Zip infra directory for IaC deployment
        # if: github.event_name != 'pull_request'
        run: |
          zip -r iac.zip ./infra/*
  
      - name: Upload IaC artifact for deployment job
        # if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: iac
          path: iac.zip

  deploy:
    # if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    env: # Define environment variables for the entire job
      LOCATION: westeurope
      AZDEPLOYMENT_NAME: swa-deployment
      RESOURCE_GROUP: rg-get-the-solution-net

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: node-app

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: iac

      - name: Unzip artifact for deployment and list contents
        run: |
          unzip iac.zip
          unzip release.zip

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy Bicep file
        uses: azure/arm-deploy@v1
        with:
          scope: 'subscription'
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
          template: ./infra/main.bicep
          region: ${{ env.LOCATION }}
          parameters: >-
                rgName=${{ env.RESOURCE_GROUP }}
                appName=get-the-solution
                rgLocation=${{ env.LOCATION }}
                repositoryUrl=https://github.com/mfe-/get-the-solution
                repositoryToken=${{ secrets.WORKFLOW_TOKEN }}
          failOnStdErr: false
          deploymentName: "${{ env.AZDEPLOYMENT_NAME }}"

      - name: Get deployment outputs
        id: get_outputs
        run: |
            outputs=$(az deployment show --name ${{ env.AZDEPLOYMENT_NAME }} --query properties.outputs -o json)
            echo "outputs=$outputs" >> $GITHUB_ENV
            echo "siteDefaultHostname=$(echo $outputs | jq -r '.siteDefaultHostname.value')" >> $GITHUB_ENV
            echo "deployment_token=$(echo $outputs | jq -r '.deployment_token.value')" >> $GITHUB_ENV
    

      - name: Display Outputs
        run: |
            echo "siteDefaultHostname=${{ env.siteDefaultHostname }}"
            echo "deployment_token=${{ env.deployment_token }}"

      - name: Deploy to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@1a947af9992250f3bc2e68ad0754c0b0c11566c9
        with:
          azure_static_web_apps_api_token: ${{secrets.AZURE_STATIC_WEB_APPS_API_TOKEN}}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist/get-the-solution-app/browser/"
          api_location: "api"
          output_location: ""
          skip_app_build: true

      # - name: Use the Environment Variables
      #   run: |
      #     echo "Unique Server Farms Name from Module: $UNIQUE_SERVER_FARMS_NAME_FROM_MODULE"
      #     echo "Web App Name: $WEB_APP_NAME"
      #     echo "Resource Group Name: $RG_NAME"

      # Dont forget to connect the Site (created by bicep) to github actions under deployment center in Azure Portal
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'get-the-solution'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_4233675665174DAFBD541E71E7D8D005 }}
          package: ./dist/get-the-solution-app
